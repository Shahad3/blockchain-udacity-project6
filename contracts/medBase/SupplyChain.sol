pragma solidity >=0.4.21 <0.6.0;

// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Created,  // 0
    Ordered,  // 1
    Shipped,     // 2
    Distributed,    // 3
    Provided,       // 4
    Bought    // 5
    }

  State constant defaultState = State.Created;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Manufactory, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 6 stages
    address originManufactoryID; // Metamask-Ethereum address of the Farmer
    string  originManufactoryName; // Farmer Name
    string  originManufactoryInformation;  // Farmer Information
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Created(uint upc);
  event Ordered(uint upc);
  event Shipped(uint upc);
  event Distributed(uint upc);
  event Provided(uint upc);
  event Bought(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    // address payable payableConsumerID = _make_payable(items[_upc].consumerID);
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier created(uint _upc) {
    require(items[_upc].itemState == State.Created);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier ordered(uint _upc) {
    require(items[_upc].itemState == State.Ordered);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier distributed(uint _upc) {
    require(items[_upc].itemState == State.Distributed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier provided(uint _upc) {
    require(items[_upc].itemState == State.Provided);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier bought(uint _upc) {
    require(items[_upc].itemState == State.Bought);
    _;
  }


  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      // address payable payableOwner = _make_payable(owner);
      selfdestruct(owner);
    }
  }

  // Function that allows you to convert an address into a payable address
    // function _make_payable(address x) internal pure returns (address payable) {
    //     return address(uint160(x));
    // }

    function toBytes(address x) internal pure returns (bytes memory b) {
    b = new bytes(20);
    for (uint i = 0; i < 20; i++)
        b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));
}

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function createItem(uint _upc, address _originManufactoryID, string memory _originManufactoryName, string memory _originManufactoryInformation, string memory _productNotes, uint _productPrice) public 
  {
    // Add the new item as part of Harvest
    Item memory item = Item(sku, _upc, msg.sender, _originManufactoryID, _originManufactoryName, _originManufactoryInformation, _upc + sku, _productNotes, _productPrice, State.Created, address(0), address(0), address(0));
    items[_upc] = item;
    string memory stringAddress = string(toBytes(msg.sender));  
    itemsHistory[_upc] = ["Created", stringAddress];
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Created(_upc);
    
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function orderItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  created(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(msg.sender)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Ordered;
    items[_upc].distributorID = msg.sender;
    string memory stringAddress = string(toBytes(msg.sender));
    itemsHistory[_upc] = ["Ordered", stringAddress];
    // Emit the appropriate event
    emit Ordered(_upc);
    
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function shipItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  ordered(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(msg.sender)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    string memory stringAddress = string(toBytes(msg.sender));
    itemsHistory[_upc] = ["Shipped", stringAddress];
    // Emit the appropriate event
    emit Shipped(_upc);
    
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function distribueItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  shipped(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].distributorID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Distributed;
    string memory stringAddress = string(toBytes(msg.sender));
    itemsHistory[_upc] = ["Distributed", stringAddress];
    // Emit the appropriate event
    emit Distributed(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function provideItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  distributed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(msg.sender)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Provided;
    items[_upc].retailerID = msg.sender;
    string memory stringAddress = string(toBytes(msg.sender));
    itemsHistory[_upc] = ["Provided", stringAddress];
    // Emit the appropriate event
    emit Provided(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    provided(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    {
    
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].itemState = State.Bought;
    string memory stringAddress = string(toBytes(msg.sender));
    itemsHistory[_upc] = ["Bought", stringAddress];
    items[_upc].consumerID = msg.sender;
    items[_upc].ownerID = msg.sender;
    // Transfer money to farmer
    // address payableManufactoryAddress = items[_upc].originManufactoryID;
    items[_upc].originManufactoryID.transfer(items[_upc].productPrice);
    // emit the appropriate event
    emit Bought(_upc);
  }


  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originManufactoryID,
  string memory originManufactoryName,
  string memory originManufactoryInformation
  ) 
  {
  // Assign values to the 8 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  originManufactoryID = items[_upc].originManufactoryID;
  originManufactoryName = items[_upc].originManufactoryName;
  originManufactoryInformation = items[_upc].originManufactoryInformation;
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originManufactoryID,
  originManufactoryName,
  originManufactoryInformation
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string memory productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint(items[_upc].itemState);
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;
    
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
